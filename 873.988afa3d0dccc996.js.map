{"version":3,"file":"873.988afa3d0dccc996.js","mappings":"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","names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","FilesystemWeb","WebPlugin","constructor","_this","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","downloadFile","_ref","_asyncToGenerator","options","_a","_b","requestInit","buildRequestInit","webFetchExtra","response","fetch","url","blob","progress","body","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","value","read","notifyListeners","allChunks","Uint8Array","position","chunk","set","Blob","buffer","type","undefined","writeFile","directory","recursive","data","uri","_x","apply","initDb","_this2","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","event","db","target","objectStoreNames","contains","deleteObjectStore","createObjectStore","keyPath","createIndex","dbRequest","cmd","args","_this3","readFlag","indexOf","then","conn","req","transaction","objectStore","dbIndexRequest","indexName","_this4","index","getPath","uriPath","cleanedUriPath","replace","fsPath","clear","_this5","readFile","_this6","entry","Error","content","_this7","encoding","doRecursive","occupiedEntry","parentPath","substr","lastIndexOf","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","appendFile","_this8","btoa","atob","deleteFile","_this9","IDBKeyRange","only","_this10","depth","match","parentEntry","rmdir","_this11","fullPath","readDirResult","readdir","files","entryPath","name","stat","_this12","entries","all","map","_ref2","e","subEntry","substring","_x2","getUri","_this13","_this14","rename","_this15","_copy","copy","_this16","requestPermissions","publicStorage","checkPermissions","doRename","_this17","toDirectory","to","from","fromDirectory","fromPath","toPath","isPathParent","parent","children","pathsA","pathsB","every","toObj","toPathComponents","fromObj","updateTime","_ref3","_x3","_x4","_x5","file","Encoding","UTF8","writeResult","contents","filename","str","_debug"],"sourceRoot":"webpack:///","sources":["./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            var _a, _b;\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!options.progress)\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const result = await this.writeFile({\n                path: options.path,\n                directory: (_a = options.directory) !== null && _a !== void 0 ? _a : undefined,\n                recursive: (_b = options.recursive) !== null && _b !== void 0 ? _b : false,\n                data: blob,\n            });\n            return { path: result.uri, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding && !(data instanceof Blob)) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data instanceof Blob ? data.size : data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content instanceof Blob) {\n                throw Error('The occupied entry contains a Blob object which cannot be appended to.');\n            }\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!(file.data instanceof Blob) && !this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n"],"x_google_ignoreList":[0]}